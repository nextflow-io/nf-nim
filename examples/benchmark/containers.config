/*
 * Configuration file for containerized RFDiffusion and OpenFold workflow
 */

manifest {
    name = 'nf-nim-containers'
    description = 'Containerized protein design and structure prediction workflow'
    version = '1.0.0'
    mainScript = 'containers.nf'
    author = 'Your Name'
    homePage = 'https://github.com/your-org/nf-nim'
}

// Enable required features
docker.enabled = true
singularity.enabled = false

// Global process configuration
process {
    // Default container settings
    container = 'ubuntu:20.04'
    
    // Resource defaults
    cpus = 2
    memory = '8 GB'
    time = '2h'
    
    // Process-specific configurations
    withName: 'rfdiffusion' {
        container = 'rosettacommons/rfdiffusion'
        cpus = 4
        memory = '16 GB'
        time = '4h'
        
        // GPU configuration for RFDiffusion
        accelerator = 1
        clusterOptions = '--gres=gpu:1'
        
        // Container options for GPU access
        containerOptions = '--gpus all --shm-size=2g'
    }
    
    withName: 'openfold' {
        container = 'deepmind/alphafold:latest'
        cpus = 8
        memory = '32 GB'
        time = '6h'
        
        // GPU configuration for AlphaFold/OpenFold
        accelerator = 1
        clusterOptions = '--gres=gpu:1'
        containerOptions = '--gpus all --shm-size=4g'
        
        // Mount database directories (adjust paths as needed)
        // containerOptions = '--gpus all --shm-size=4g -v /path/to/alphafold/databases:/data'
    }
    
    withName: 'esmfold' {
        container = 'pytorch/pytorch:latest'
        cpus = 4
        memory = '16 GB'
        time = '2h'
        
        // GPU configuration for ESMFold
        accelerator = 1
        clusterOptions = '--gres=gpu:1'
        containerOptions = '--gpus all --shm-size=2g'
    }
}

// Executor configuration
executor {
    name = 'local'
    cpus = 16
    memory = '64 GB'
}

// Alternative executor configurations
profiles {
    
    local {
        executor.name = 'local'
        executor.cpus = 16
        executor.memory = '64 GB'
        docker.enabled = true
    }
    
    slurm {
        executor.name = 'slurm'
        executor.queueSize = 50
        executor.pollInterval = '30 sec'
        
        process {
            queue = 'gpu'
            clusterOptions = '--gres=gpu:1'
        }
    }
    
    aws {
        executor.name = 'awsbatch'
        executor.awscli = '/home/ec2-user/miniconda/bin/aws'
        
        process {
            queue = 'nextflow-gpu-queue'
            container = 'your-account.dkr.ecr.region.amazonaws.com/your-repo'
        }
        
        aws {
            region = 'us-west-2'
            batch {
                cliPath = '/home/ec2-user/miniconda/bin/aws'
            }
        }
    }
    
    singularity {
        singularity.enabled = true
        docker.enabled = false
        
        process {
            withName: 'rfdiffusion' {
                container = 'docker://nvcr.io/nvidia/rfdiffusion:latest'
            }
            withName: 'openfold' {
                container = 'docker://deepmind/alphafold:latest'
            }
            withName: 'esmfold' {
                container = 'docker://pytorch/pytorch:latest'
            }
        }
    }
    
    test {
        // Reduced resources for testing
        process {
            cpus = 1
            memory = '2 GB'
            time = '30m'
            
            withName: 'rfdiffusion' {
                cpus = 1
                memory = '4 GB'
                time = '1h'
            }
            
            withName: 'openfold' {
                cpus = 2
                memory = '8 GB'
                time = '1h'
            }
        }
    }
}

// Reporting and monitoring
timeline {
    enabled = true
    file = 'results/timeline.html'
}

report {
    enabled = true
    file = 'results/report.html'
}

trace {
    enabled = true
    file = 'results/trace.txt'
}

dag {
    enabled = true
    file = 'results/dag.svg'
}

// Cleanup settings
cleanup = true

// Container registry settings
docker {
    registry = 'nvcr.io'
    temp = 'auto'
    remove = true
    runOptions = '--rm'
}

// Work directory
workDir = './work'

// Parameters validation
params {
    // Input validation
    help = false
    
    // Default parameter values (can be overridden)
    max_cpus = 16
    max_memory = '64.GB'
    max_time = '24.h'
}

// Notification settings
notification {
    enabled = true
    to = 'your-email@domain.com'
    from = 'nextflow@your-domain.com'
} 